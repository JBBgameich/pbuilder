#! /bin/bash
#   pbuilder -- personal Debian package builder
#   Copyright (C) 2001,2002 Junichi Uekawa
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

export LANG=C
export LC_ALL=C
set -e

. /usr/lib/pbuilder/pbuilder-checkparams
. /usr/lib/pbuilder/pbuilder-runhooks
. /usr/lib/pbuilder/pbuilder-buildpackage-funcs


PACKAGENAME="$1"
if [ ! -f "$PACKAGENAME" ]; then
    echo "Command line parameter [$PACKAGENAME] is not a valid .dsc file name" >&2
    exit 1;
fi;

if [ -n "$BUILDUSERNAME" -a -n "$BUILDUSERID" ]; then
    SUTOUSER="su $BUILDUSERNAME -- "
    DEBBUILDOPTS="$DEBBUILDOPTS -rfakeroot"
    EXTRAPACKAGES="${EXTRAPACKAGES} fakeroot"
    echo "I: using fakeroot in build."
else
    # run the build in root
    SUTOUSER=""
    BUILDUSERID=0
    BUILDUSERNAME=root
fi

export HOME="/tmp/buildd"

showbuildbanner '$Id$'
echobacktime
extractbuildplace 
trap umountproc_cleanbuildplace exit
loadhooks

if [ -z "${PBUILDER_BUILD_LOGFILE}" ]; then
    if [ "${USE_PKGNAME_LOGFILE}" = "yes" ]; then
	PBUILDER_BUILD_LOGFILE="${BUILDRESULT}/"$(basename "${PACKAGENAME}" .dsc)
	exec > "${PBUILDER_BUILD_LOGFILE}"
	exec 2>&1
	PBUILDER_BUILD_LOGFILE=$(readlink -f "${PBUILDER_BUILD_LOGFILE}")
	echo "I: Using pkgname logfile"
	showbuildbanner '$Id$'
	echobacktime
    fi
fi

recover_aptcache
echo "Installing the build-deps"
trap saveaptcache_umountproc_cleanbuildplace exit
executehooks "D"
checkbuilddep "$PACKAGENAME"
save_aptcache
trap umountproc_cleanbuildplace exit
createbuilduser

echo "Copying source file"
copydsc "$PACKAGENAME" "$BUILDPLACE/tmp/buildd"

echo "Extracting source"
if ! $CHROOTEXEC /bin/bash -c "( cd tmp/buildd; chown $BUILDUSERNAME:$BUILDUSERNAME ../buildd *; $SUTOUSER /usr/bin/dpkg-source -x $(basename $PACKAGENAME) )"; then
    echo "pbuilder: Failed extracting the source" >&2 
    exit 1;
fi

echo " -> Building the package"
export PATH="/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin"

executehooks "A"

if [ -z "$DEBEMAIL" ]; then
    DPKG_COMMANDLINE="cd tmp/buildd/*/; $SUTOUSER dpkg-buildpackage -us -uc $DEBBUILDOPTS"
else
    DPKG_COMMANDLINE="cd tmp/buildd/*/;  $SUTOUSER dpkg-buildpackage -us -uc  \"-m$DEBEMAIL\" $DEBBUILDOPTS"
fi

(
    : Build process
    $CHROOTEXEC /bin/bash -c "${DPKG_COMMANDLINE}"
) &
BUILD_PID=$!
if [ -n "${TIMEOUT_TIME}" ]; then
    ( 
	: Timeout process
	sleep "${TIMEOUT_TIME}"
	echo " -> Terminating build process due to timeout "
	kill ${BUILD_PID} || true
    ) & # timeout process
    KILL_WAIT_PID="kill "$!" || true; echo \"  -> Terminate timeout process\"; "
else
    KILL_WAIT_PID=""
fi

if ! wait ${BUILD_PID}; then
    trap umountproc_cleanbuildplace exit
    eval "${KILL_WAIT_PID}"
    echo "pbuilder: Failed autobuilding of package" >&2
    executehooks "C"
    exit 1;
else
    eval ${KILL_WAIT_PID}
    # build was successful
fi

trap umountproc_cleanbuildplace exit
executehooks "B"
trap cleanbuildplace exit
umountproc

if [ -n "${BUILDRESULT}" ]; then
    mkdir -p "${BUILDRESULT}"
    if [ -d "${BUILDRESULT}" ]; then
	if [ -n "${BUILDRESULTUID}" ]; then
	    chown "${BUILDRESULTUID}" "${BUILDPLACE}"/tmp/buildd/*
	fi
	if [ -n "${BUILDRESULTGID}" ]; then
	    chgrp "${BUILDRESULTGID}" "${BUILDPLACE}"/tmp/buildd/*
	fi
	cp -p "${BUILDPLACE}"/tmp/buildd/* "${BUILDRESULT}" 2>/dev/null || true
    else
	echo "E: BUILDRESULT=[$BUILDRESULT] is not a directory." >&2
    fi
fi

echobacktime

