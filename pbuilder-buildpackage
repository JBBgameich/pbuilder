#! /bin/bash
export LANG=C
export LC_ALL=C

function copydsc () {
    local DSCFILE="$1"
    local TARGET="$2"
    for FILE in \
      "$DSCFILE" \
      $(echo "$DSCFILE" | sed 's/^\(.*\)\.dsc$/\1/' ).diff.gz \
      $(echo "$DSCFILE" | sed 's/^\(.*\)\.dsc$/\1/').tar.gz \
      $(echo "$DSCFILE" | sed 's/\(.*\)-[^-]*\.dsc$/\1/').orig.tar.gz ; do
        cp "$FILE" "$TARGET" ;
    done
}

function checkbuilddep_versiondeps () {
    # not used yet.
    local PACKAGE="$1"
    local COMPARESTRING="$2"
    local DEPSVERSION="$3"
    local PACKAGEVERSION=$(apt-cache show $PACKAGE | grep "^Version:" | sort | head -1 | sed 's/^Version: \(.*\)$/\1/')
    # no versioned provides.
    #echo    dpkg --compare-versions "[$PACKAGEVERSION]" "[$COMPARESTRING]" "[$DEPSVERSION]";
    if dpkg --compare-versions "$PACKAGEVERSION" "$COMPARESTRING" "$DEPSVERSION"; then
	# satisfies depends
	return 0;
    else
	# cannot satisfy depends
	return 1;
    fi
}

function checkbuilddep_archdeps () {
    # returns FALSE on INSTALL
    local INSTALLPKG="$1"
    local ARCH="$2"
    if echo "$INSTALLPKG" | sed 's/.*\(\[.*\]\)/\1/' | grep "[[/][!]$ARCH[]/]" > /dev/null; then
	# if !$ARCH exists in there, ERROR.
	return 0;
    fi
    if ! echo "$INSTALLPKG" | sed 's/.*\(\[.*\]\)/\1/' | grep "[!]" > /dev/null; then
	if ! echo "$INSTALLPKG" | sed 's/.*\(\[.*\]\)/\1/' | grep "[[/]$ARCH[]/]" > /dev/null; then
	# if $ARCH does not exist, ERROR.
	    return 0;
	fi
    fi
    return 1;
}

function checkbuilddep_provides () {
    # not used yet. -- returns a potential candidate in $PACKAGE, if available.
    local PACKAGENAME="$1"
    PROVIDED=$(apt-cache showpkg $PACKAGENAME | awk '{p=0}/^Reverse Provides:/,/^$/{p=1}{if(p && ($0 !~ "Reverse Provides:")){PACKAGE=$1}} END{print PACKAGE}')
}

function checkbuilddep_internal () {
# Use this function to fulfill the dependency (almost)
    local ARCH=$(dpkg --print-architecture)
    echo " -> Attempting to parse the build-deps by myself"
    for INSTALLPKGMULTI in $(grep "^Build-Depends\(-Indep\|\): " "$BUILDPLACE/"tmp/buildd/*/debian/control | \
	sed 's/^[^:]*: \(.*\)$/\1/' | \
	tr " " "/" | \
	awk 'BEGIN{RS=","} {print}'); do
      echo " -> Considering "$(echo $INSTALLPKGMULTI | tr "/" " " | awk '{print $1}' )
      SATISFIED="no"
      for INSTALLPKG in $(echo "$INSTALLPKGMULTI" | \
	  awk 'BEGIN{RS="|"} {print}'); do
	#echo " -> Trying to install $INSTALLPKG"
	if echo "$INSTALLPKG" | grep '\[' > /dev/null ; then
	    if checkbuilddep_archdeps "$INSTALLPKG" "$ARCH"; then
		SATISFIED="yes"
		echo "   -> This package is not for this architecture"
		continue;
	    fi
	fi
	if echo "$INSTALLPKG" | grep '[(]' > /dev/null; then
	    #echo "Debug: $INSTALLPKG"
	    if ! checkbuilddep_versiondeps $(echo "$INSTALLPKG" | tr "/" " " | awk '{print $1}') \
		$(echo "$INSTALLPKG" | tr "/" " " | sed 's/^.*(\(<<\|<=\|>=\|=\|<\|>>\|>\)[ ]*\(.*\)).*$/\1/') \
		$(echo "$INSTALLPKG" | tr "/" " " | sed 's/^.*(\(<<\|<=\|>=\|=\|<\|>>\|>\)[ ]*\(.*\)).*$/\2/') ; then
	      echo "   -> Does not satisfy version, not trying"
	      continue;
	    fi
	fi
	echo " -> Installing "$(echo "$INSTALLPKG" | tr "/" " " | awk '{print $1}')

	if $CHROOTEXEC usr/bin/apt-get -y install $(echo "$INSTALLPKG" | tr "/" " " | awk '{print $1}'); then
	    SATISFIED="yes"
	else
	    # package could not be found. -- looking for alternative.
	    PROVIDED=""
	    checkbuilddep_provides $(echo "$INSTALLPKG" | tr "/" " " | awk '{print $1}')
	    if [ -n "$PROVIDED" ]; then
		# something provides this package
		echo "   -> Installing $PROVIDED to satisfy the dependency "
		if $CHROOTEXEC usr/bin/apt-get -y install $PROVIDED; then
		    SATISFIED="yes";
		fi
	    fi
	fi
      done;
      if [ "$SATISFIED" = "no" ]; then
	  echo Could not satisfy build-dependency.
	  abortingfunction
	  exit 1
      fi
    done;
    for INSTALLPKG in $(grep "^Build-Conflicts\(-Indep\|\): " "$BUILDPLACE/"tmp/buildd/*/debian/control | \
	sed 's/^[^:]*: \(.*\)$/\1/' | \
	tr " " "/" | \
	awk 'BEGIN{RS=","} {print}'); do
      echo " -> Considering "$(echo $INSTALLPKG | tr "/" " " | awk '{print $1}' )
      if echo "$INSTALLPKG" | grep '\[' > /dev/null ; then
	  # this package has arch-conflicts.
	  if checkbuilddep_archdeps "$INSTALLPKG" "$ARCH"; then
	      continue;
	  fi
      fi
      if echo "$INSTALLPKG" | grep '[(]' > /dev/null ; then
	  # this package has version-conflicts
	  if ! checkbuilddep_versiondeps $(echo "$INSTALLPKG" | tr "/" " " | awk '{print $1}') \
		$(echo "$INSTALLPKG" | tr "/" " " | sed 's/^.*(\(<<\|<=\|>=\|=\|<\|>>\|>\)[ ]*\(.*\)).*$/\1/') \
		$(echo "$INSTALLPKG" | tr "/" " " | sed 's/^.*(\(<<\|<=\|>=\|=\|<\|>>\|>\)[ ]*\(.*\)).*$/\2/'); then
	      echo "   -> Satisfies version, not trying"
	      continue;
	  fi
      fi
      #echo " -> Removing $INSTALLPKG"
      $CHROOTEXEC usr/bin/apt-get -y remove $(echo "$INSTALLPKG" | tr "/" " " | awk '{print $1}') || (
	  echo Could not satisfy build-conflicts
	  abortingfunction
	  exit 1
      )
    done
}

function checkbuilddep () {
    checkbuilddep_internal;
}

. /usr/lib/pbuilder/pbuilder-checkparams

PACKAGENAME="$1"
CHROOTEXEC="chroot $BUILDPLACE "

if [ ! -f "$PACKAGENAME" ]; then
    echo "Command line parameter [$PACKAGENAME] is not a valid .dsc file name" >&2
    exit 1;
fi;

extractbuildplace 

echo Copying source file
copydsc "$PACKAGENAME" "$BUILDPLACE/tmp/buildd"
echo Extracting source
$CHROOTEXEC /bin/bash -c "( cd tmp/buildd; /usr/bin/dpkg-source -x $(basename $PACKAGENAME) )" || (
    echo pbuilder: Failed extracting the source >&2 
    abortingfunction
    exit 1;
)
echo Installing the build-deps
checkbuilddep
echo Building the package
export PATH="/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin"
if ! $CHROOTEXEC /bin/bash -c "cd tmp/buildd/*/;  dpkg-buildpackage"; then
    echo "pbuilder: Failed autobuilding of package" >&2
    abortingfunction
    exit 1;    
fi

umountproc

if [ -n "$BUILDRESULT" ]; then
    mkdir -p "$BUILDRESULT"
    if [ -d "$BUILDRESULT" ]; then
	cp "$BUILDPLACE"/tmp/buildd/* "$BUILDRESULT"
    else
	echo "Error: BUILDRESULT=[$BUILDRESULT] and is not a directory." >&2
    fi
fi

cleanbuildplace

