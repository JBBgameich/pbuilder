<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "/usr/share/sgml/docbook/dtd/xml/4.2/docbookx.dtd"> 
<!-- the original of this documentation is in pbuilder source tar-ball,
  and the latest version is found in CVS repository. -->
<book>
  <bookinfo>
    <date>2005-10-08</date>
    <title>pbuilder User's Manual</title>
    <abbrev>pbuilder-doc</abbrev>
    <subtitle>Usage and operations</subtitle>
    <releaseinfo>documentation in progress ($Id$)</releaseinfo>
    <authorgroup>
      <author>
	<firstname>Junichi</firstname>
	<surname>Uekawa</surname>
      </author>
    </authorgroup>
  </bookinfo>
  <!-- FIXME: consistent markup of commands, files, and variables -->
  <chapter>
    <title>Introducing pbuilder</title>
    <sect1 id="aim">
      <title>Aims of pbuilder</title>
      <para>
	<command>pbuilder</command> stands for
	Personal Builder, and it is an automatic Debian Package Building system
	for personal environments.
	<command>pbuilder</command> aims to be an
	easy-to-setup system
	for auto-building Debian packages inside a clean-room
	environment, so that it is possible to verify that
	a package can be built on most Debian installations.
	The clean-room environment is achieved through the use of
	a chroot image,
	so that only minimal packages will be installed inside the
	chroot.
      </para>
      <para>
	The Debian distribution consists of free software
	accompanied with source.
	The source code within Debian's "main" section
	must build within Debian "main",
	with only the explicitly specified build-dependencies
	installed.
      </para>
      <para>
	The primary aim of pbuilder is different from other
	auto-building systems in Debian in that its aim is not
	to try to build as many packages as possible.
        It does not try to guess
	what a package needs, and in most cases it tries the
	worst choice of all if there is a choice to be made.
      </para>
      <para>
	In this way, <command>pbuilder</command> tries to ensure
	that packages
	tested against pbuilder will build properly in
	most Debian installations, hopefully resulting
	in a good overall Debian source-buildability.
      </para>
      <para>
	The goal of making Debian buildable from source is
	somewhat accomplished, and has seen good progress.
	It is known that Debian 3.0 has problems when building from source.
	But the version after, Debian 3.1 should
	be better, and the version after.
      </para>
    </sect1>
  </chapter>
  <chapter id="usingpbuilder">
    <title>Using pbuilder</title>
    <sect1 id="creatingbase">
      <title>Creating a base chroot image</title>
      <para>
	<command>pbuilder create</command>
	will create a base chroot image.
	The distribution code-name needs to be specified with
	the <command><option>--distribution</option></command>
	command-line option.
	Usually, "sid" is used, and the default is now sid.
      </para>
      <para>
	<command>debootstrap</command> is used to create
	the bare minimum Debian installation,
	and then build-essential packages are installed on top
	of the minimum installation using <command>apt-get</command>
	inside the chroot.
      </para>
      <para>
	For fuller documentation of command-line options, see
	the pbuilder.8 manual page.
	Some configuration will be required for <filename>/etc/pbuilderrc</filename>
	for the mirror site
	<footnote>
	  <para>
	    The mirror site should preferably be
	    a local mirror or a cache server,
	    so as not to overload the public mirrors with
	    a lot of access.
	    Use of tools such as apt-proxy would be advisable.
	  </para>
	</footnote>
	to use, and proxy configuration may be required to allow access
	through HTTP.
	See the pbuilderrc.5 manual page for details.
      </para>
    </sect1>
    <sect1>
      <title>Updating the base chroot image</title>
      <para><command>pbuilder update</command>
	will update the chroot image.
	It will extract the chroot, invoke <command>apt-get update</command>
	and <command>apt-get dist-upgrade</command> inside the
	chroot, and then recreate the base tarball.
      </para>
      <para>
	It is possible to switch the distribution which the chroot
	tarball is targeted at at this point.
	Specify <command><option>--distribution <parameter>sid</parameter></option> <option>--override-config</option></command> to change the distribution
	to sid.
	<footnote>
	  <para>Only upgrading is supported.
	  Debian does not generally support downgrading (yet?).</para>
	</footnote>
      </para>
      <para>
	For fuller documentation of command-line options, see
	the pbuilder.8 manual page
      </para>
    </sect1>
    <sect1 id="buildpackagechroot">
      <title>Building a package using the chroot image</title>
      <para>
	To build a package inside the chroot, invoke
	<command>pbuilder build <option>whatever.dsc</option></command>.
	<command>pbuilder</command> will extract
	the chroot image to a temporary working directory,
	and satisfy the build-dependencies inside the chroot,
	and build the package.
	The built packages will be moved to a
	directory specified with
	the <command><option>--buildresult</option></command>
	command-line option.
      </para>
      <para>
	The <command><option>--basetgz</option></command> option can be
	used to specify which chroot image to use.
      </para>
      <para>
	<command>pbuilder</command> will extract a fresh chroot image
	created with <command>pbuilder build</command>
	and updated with <command>pbuilder update</command>,
	and populate the chroot with build-dependencies by parsing
	debian/control and invoking <command>apt-get</command>.
      </para>
      <para>
	For fuller documentation of command-line options, see
	the pbuilder.8 manual page
      </para>
    </sect1>
    <sect1 id="pdebuild">
      <title>Facilitating Debian Developers' typing, pdebuild</title>
      <para>
	<command>pdebuild</command> is a little wrapper
	script that does the most frequent of all tasks.
	A Debian Developer may try to do <command>debuild</command>, and
	build a package, inside a Debian source directory.
	<command>pdebuild</command> will allow similar
	control, and allow package to be built inside the chroot,
	to check that the current source tree will build happily
	inside the chroot.
      </para>
      <para>
	<command>pdebuild</command> calls <command>dpkg-source</command>
	to build the source packages, and then invokes
	<command>pbuilder</command> on the resulting source package.
	However, unlike debuild, the resulting deb files will be
	found in the <command><option>--buildresult</option></command>
	directory.
      </para>
      <para>
	See the pdebuild.1 manual page for more details.
      </para>
      <para>
	There is a slightly different mode of operation available
	in pdebuild since version 0.97. pdebuild usually runs
	<command>debian/rules clean</command> outside of the chroot;
	however, it is possible to change the behavior to run it
	inside the chroot with
	the <command><option>--use-pdebuild-internal</option></command>.
	<!-- FIXME: name of option is misleading, change it?
	 maybe when it's more useful.
	-->
	It will try to bind mount the working directory inside chroot,
	and run <command>dpkg-buildpackage</command> inside.
	It has the following characteristics, and thus cannot be made default.
      </para>
      <itemizedlist>
	<listitem>
	  <para>The working directory is modified
	  from inside the chroot.</para>
	</listitem>
	<listitem>
	  <para>Building with pdebuild does not guarantee
	  that it works with pbuilder.</para>
	</listitem>
	<listitem>
	  <para>If making the source package fails,
	  the session using the chroot is wasted
	  (chroot creation takes a bit of time).</para>
	</listitem>
	<listitem>
	  <para>Does not work in the same manner as it used to;
	  for example, <command><option>--buildresult</option></command>
	  does not have any effect.</para>
	</listitem>
      </itemizedlist>

    </sect1>
    <sect1 id="configfile">
      <title>Configuration Files</title>
      <para>
	It is possible to specify all settings by command-line
	options. However, for typing convenience, it is possible to
	use a configuration file.
      </para>
      <para>
	<filename>/etc/pbuilderrc</filename> and
	<filename>${HOME}/.pbuilderrc</filename>
	are read in when pbuilder is invoked.
	The possible options are documented in
	the pbuilderrc.5 manual page.
      </para>
      <para>
	It is useful to use --configfile option to load up a pre-set
	configuration file  when switching between configuration files for
	different distributions.
      </para>
      <para>
	Please note <filename>${HOME}/.pbuilderrc</filename> supersede system settings.  For
	example, if you are upgrading from sarge to etch, you may need to
	adjust some part of your local setting just like new
	<filename>/usr/share/pbuilder/pbuilderrc</filename>, e.g., "unset DEBOOTSTRAPOPTS", to cope
	with the use of cdebootstrap.  The same care is needed if you edited
	old system setting in <filename>/etc/pbuilderrc</filename>.
      </para>
    </sect1>
    <sect1 id="nonrootchroot">
      <title>Building packages as non-root inside the chroot</title>
      <para>
	<command>pbuilder</command> requires full root privilege
	when it is satisfying the build-dependencies, but most packages do not
	need root privilege, or fail to build when they are root.
	<command>pbuilder </command> can create a user which is only used
	inside <command>pbuilder </command> and use that user id when
	building, and use the <command>fakeroot</command> command
	when root privilege is required.
      </para>
      <para>
	BUILDUSERID configuration option should be set to a value for a user id that
	does not already exist on the system, so that it is more difficult for
	packages that are being built with
	<command>pbuilder</command> to affect the environment outside the chroot.
	When BUILDUSERNAME configuration option is also set,
	pbuilder will use the specified user name and fakeroot for building packages,
	instead of running as root inside chroot.
      </para>
      <para>
	Even when using the fakerooting method, pbuilder will run with
	root privilege when it is required.
	For example, when installing
	packages to the chroot, pbuilder will run under root privilege.
      </para>
      <para>
	To be able to invoke pbuilder without being
	root, you need to use user-mode-linux, as explained
	in <xref linkend="pbuilder-uml"/>.
      </para>
    </sect1>
    <sect1 id="backporting">
      <title>Using pbuilder for back-porting</title>
      <para>
	pbuilder can be used for back-porting software from
	the latest Debian distribution to
	the older stable distribution, by using a chroot that contains
	an image of the older distribution, and building packages inside the
	chroot.
	There are several points to consider, and due to the following reasons,
	automatic back-porting is usually not possible, and
	manual interaction is required:
      </para>
      <itemizedlist>
	<listitem>
	  <para>The package from the unstable distribution
	  may depend on packages or versions of packages which
	  are only available in unstable.
	  Thus, it may not be possible to satisfy Build-Depends:
	  on stable (without additional backporting work).</para>
	</listitem>
	<listitem>
	  <para>The stable distribution may have bugs that have been
	  fixed in unstable which need to be worked around.</para></listitem>
	<listitem>
	  <para>The package in the unstable distribution may have
	  problems building even on unstable.</para>
	</listitem>
      </itemizedlist>
    </sect1>
    <sect1 id="massbuild">
      <title>Mass-building packages</title>
      <para>
	pbuilder can be automated, because its operations are
	non-interactive.
	It is possible to run pbuilder through multiple packages
	non-interactively.
	Several such scripts are known to exist.
	Junichi Uekawa has been running such a script since 2001,
	and has been filing bugs on packages that fail the
	test of pbuilder. There were several problems with auto-building:
      </para>
      <itemizedlist>
	<listitem>
	  <para>Build-Dependencies need to install non-interactively, but
	    some packages are so broken that they cannot install
	    without interaction (like postgresql).</para>
	</listitem>
	<listitem>
	  <para>When a library package breaks, or gcc/gcj/g++ breaks,
	    or even bison, a large number of build failures are reported.
	    (gcj-3.0 which had no "javac", bison which got more strict, etc.)
	  </para>
	</listitem>
	<listitem>
	  <para>Some people were quite hostile against build failure reports.</para>
	</listitem>
      </itemizedlist>
      <para>
	But most of these problems are now getting solved.
	Only about 10% of Debian now fails to build from source (29 Dec 2002).
	<!-- TODO: update for 2004/2005 time frame? -->
      </para>
      <para>
	A script that was used by Junichi Uekawa is now included in
	the pbuilder distribution, as <command>pbuildd.sh</command>.
	It is available in <filename>/usr/share/doc/pbuilder/examples/pbuildd/</filename>
	and its configuration is in <filename>/etc/pbuilder/pbuildd-config.sh</filename>.
	It should be easy enough to set up for people who are used to
	pbuilder. It has been running for quite a while, and it should be
	possible to set the application up on your system also.
	However, it is a new introduction, and please file bugs
	to the Debian BTS if you know of possible problems,
	or improved on the script considerably.
      </para>
      <para>
	To set up pbuildd, there are some points to be aware of.
      </para>
      <itemizedlist>
	<listitem>
	  <para>A file <filename>./avoidlist</filename> needs to be available with the list of packages to avoid building. </para>
	</listitem>
	<listitem>
	  <para>It will try building anything, even packages
	  which are not aimed for your architecture.</para>
	</listitem>
	<listitem>
	  <para>Because you are running random build scripts, it is better to use
	  the fakeroot option of pbuilder, to avoid running the build
	  under root privilege.</para>
	</listitem>
	<listitem>
	  <para>Because not all builds are guaranteed to finish in a finite time,
	    setting a timeout is probably necessary, or pbuildd may stall with
	    a bad build.</para>
	</listitem>
	<listitem>
	  <para>
	    Some packages require a lot of disk space,
	    around 2GB seems to be sufficient for the largest packages for the time being.
            If you find otherwise, please inform the maintainer of this documentation.
	  </para>
	</listitem>
      </itemizedlist>
    </sect1>
    <sect1>
      <title>Auto-backporting scripts</title>
      <para>
	There are some people who use pbuilder to automatically back-port
	a subset of packages to the stable distribution.
      </para>
      <para>
	I would like some information on how people are doing it,
	I would appreciate any feedback or information on
	how you are doing, or any examples.
      </para>
    </sect1>
    <sect1 id="autotesting">
      <title>Using pbuilder for automated testing of packages</title>
      <para>
	pbuilder can be used for automated testing of packages.
	It has the feature of allowing hooks to be placed,
	and these hooks can try to install packages inside
	the chroot, or run them, or whatever else that
	can be done. Some known tests and ideas:
      </para>
      <itemizedlist>
	<listitem>
	  <para>Automatic install-remove-upgrade-remove-install-purge-upgrade-purge testsuite (distributed as an example, <filename>B91dpkg-i</filename>),
	    or just check that everything installs somewhat (<filename>execute_installtest.sh</filename>).</para>
	</listitem>

	<listitem>
	  <para>Automatically running lintian/linda (distributed as an example in
	    <filename>/usr/share/doc/pbuilder/examples/B90linda</filename>).</para>
	</listitem>
	<listitem>
	  <para>Automatic debian-test of the package?
	  The debian-test package has been removed from Debian.
	  A pbuilder implementation can be found as 
	  debian/pbuilder-test directory, implemented through B92pkg-test script.</para>
	</listitem>
     </itemizedlist>
    </sect1>
    <sect1 id="altcompiler">
      <title>Using pbuilder for testing builds with alternate compilers</title>
      <para>
	Most packages are compiled with <command>gcc</command>
	or <command>g++</command>
	and using the default compiler version, which was gcc 2.95 for Debian GNU/Linux 3.0 (i386).
	However, Debian 3.0 was distributed with other compilers, under package names
        such as <command>gcc-3.2</command> for gcc compiler
	version 3.2.
	It was therefore possible to try compiling packages against different
	compiler versions.
	<command>pentium-builder</command> provides an infrastructure for
	using a different compiler for building packages than the default gcc, by
	providing a wrapper script called gcc which calls the real gcc.
	To use <command>pentium-builder</command> in <command>pbuilder</command>, it is possible to set up the
	following in the configuration:
	<screen>
EXTRAPACKAGES="pentium-builder gcc-3.2 g++-3.2"
export DEBIAN_BUILDARCH=athlon
export DEBIAN_BUILDGCCVER=3.2
	</screen>
      </para>
      <para>
	It will instruct <command>pbuilder</command> to install the <command>pentium-builder</command> package
	and also the GCC 3.2 compiler packages inside the chroot,
	and set the environment variables required for
	<command>pentium-builder</command> to function.
      </para>
    </sect1>
  </chapter>
  <chapter id="pbuilder-uml">
    <title>Using User-mode-linux with pbuilder</title>
    <para>
      It is possible to use user-mode-linux
      by invoking <command>pbuilder-uml</command>
      instead of <command>pbuilder</command>.
      <command>pbuilder-uml</command> doesn't require
      root privileges, and it uses
      the copy-on-write (COW) disk access method of User-mode-linux
      which typically makes it much faster
      than the traditional <command>pbuilder</command>.
    </para>
    <para>
      User-mode-linux is a somewhat less proven platform
      than the standard Unix tools which
      <command>pbuilder</command> relies on
      (<command>chroot</command>,
      <command>tar</command>,
      and <command>gzip</command>)
      but mature enough to support <command>pbuilder-uml</command>
      since its version 0.59.
      And since then, pbuilder-uml has seen a rapid evolution.
    </para>
    <para>
      The configuration of pbuilder-uml goes in three steps:
      <itemizedlist>
	<listitem>
	  <para>Configuration of user-mode-linux</para>
	</listitem>
	<listitem>
	  <para>Configuration of rootstrap</para>
	</listitem>
	<listitem>
	  <para>Configuration of pbuilder-uml</para>
	</listitem>
      </itemizedlist>
    </para>
    <sect1 id="user-mode-linux-config">
      <title>Configuring user-mode-linux</title>
      <para>
	UML isn't completely trivial to set up.
	It would probably be useful to acquaint yourself with it a bit
	before attempting to use rootstrap or pbuilder-uml.
	For details,
	read <filename>/usr/share/doc/uml-utilities/README.Debian</filename>
	and the user-mode-linux documentation.
	(It's in a separate package, user-mode-linux-doc.)
      </para>
      <para>
	<command>user-mode-linux</command> requires
	the user to be in the uml-net group in order to configure the network
	unless you are using slirp.
      </para>
      <para>
	If you compile your own kernel, you may want to
	verify that you enable TUN/TAP support,
	and you might want to consider the SKAS patch.
      </para>
    </sect1>
    <sect1 id="rootstrap">
      <title>Configuring rootstrap</title>
      <para>
	<command>rootstrap</command>
	is a wrapper around debootstrap.
	It creates a Debian disk image for use with UML.
	To configure rootstrap, there are several requirements.
      </para>
      <itemizedlist>
	<listitem>
	  <para>Install the rootstrap package.</para>
	</listitem>
	<listitem>
	  <para>
	    TUN/TAP only:
	    add the user to the uml-net group to allow access to the network
	    <screen>
adduser dancer uml-net
	    </screen></para>
	</listitem>
	<listitem>
	  <para>TUN/TAP only:
	    Check that the kernel supports the TUN/TAP interface,
	    or recompile the kernel if necessary.
	  </para>
	</listitem>
	<listitem>
	  <para>Set up <filename>/etc/rootstrap/rootstrap.conf</filename>.
	    For example,
	    if the current host is 192.168.1.2, changing following
	    entries to something like this seems to work.
	    <screen>
transport=tuntap
interface=eth0
gateway=192.168.1.1
mirror=http://192.168.1.2:8081/debian
host=192.168.1.198
uml=192.168.1.199
netmask=255.255.255.0
	    </screen>
	    Some experimentation with configuration and running
	    <command>rootstrap ~/test.uml</command> to actually
	    test it would be handy.
	  </para>
	  <para>
	    Using slirp requires less configuration.
	    The default configuration comes with a working example.
	  </para>
	</listitem>
      </itemizedlist>
    </sect1>
    <sect1 id="pbuilderumlconfig">
      <title>Configuring pbuilder-uml</title>
      <para>
	The following needs to happen:
	<itemizedlist>
	  <listitem>
	    <para>Install the pbuilder-uml package.</para>
	  </listitem>
	  <listitem>
	    <para>
	      Set up the configuration file
	      <filename>/etc/pbuilder/pbuilder-uml.conf</filename>
	      in the following manner. It will be different for slirp.
	      <screen>
MY_ETH0=tuntap,,,192.168.1.198
UML_IP=192.168.1.199
UML_NETMASK=255.255.255.0
UML_NETWORK=192.168.1.0
UML_BROADCAST=255.255.255.255
UML_GATEWAY=192.168.1.1
PBUILDER_UML_IMAGE="/home/dancer/uml-image"
	      </screen>
	      Also, it needs to match the rootstrap configuration.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Make sure BUILDPLACE is writable by the user.
	      Change BUILDPLACE in the configuration file to a place
	      where the user has access.
	    </para>
	  </listitem>
	  <listitem>
	    <para>Run <command>pbuilder-user-mode-linux create --distribution sid</command> to create the image.</para>
	  </listitem>
	  <listitem>
	    <para>Try running <command>pbuilder-user-mode-linux build</command>.</para>
	  </listitem>
	</itemizedlist>
      </para>
    </sect1>
    <sect1 id="consideruml">
      <title>Considerations for running pbuilder-uml</title>
      <para>
	pbuilder-user-mode-linux emulates most of pbuilder, but there
	are some differences.
      </para>
      <itemizedlist>
	<listitem>
	  <para>	
	    pbuilder-user-mode-linux does not support all options of pbuilder
	    properly yet. This is a problem, and will be addressed as
	    specific areas are discovered.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    /tmp is handled differently inside pbuilder-uml.
	    In pbuilder-uml, /tmp is mounted as tmpfs inside UML,
	    so accessing files under /tmp from outside user-mode-linux
	    does not work.
	    It affects options like
	    <command><option>--configfile</option></command>,
	    and when trying to build packages placed under <filename>/tmp</filename>.
	  </para>
	</listitem>
      </itemizedlist>
    </sect1>
    <sect1 id="paralleluml">
      <title>Parallel running of pbuilder-user-mode-linux</title>
      <para>
	To run pbuilder-uml in parallel on a system, there are a few things
	to bear in mind.
      </para>
      <itemizedlist>
	<listitem>
	  <para>The create and update methods must not be run when
	  a build is in progress, or the COW file will be invalidated.</para>
	</listitem>
	<listitem>
	  <para>
	    If you are not using slirp, UML processes which are
	    running in parallel need to have different IP addresses.
	    Just trying to run the <command>pbuilder-uml</command>
	    several times will result in failure to access the network.
	    But something like the following will work:
	    <screen>
for IP in 102 103 104 105; do
  xterm -e pbuilder-user-mode-linux build --uml-ip 192.168.0.$IP \
    20030107/whizzytex_1.1.1-1.dsc &amp;
done
	    </screen>
	    When using slirp, this problem does not exist.
	  </para>
	</listitem>
      </itemizedlist>
    </sect1>
    <sect1 id="pbuilderumlwrap">
      <title>Using pbuilder-uml as a wrapper script to start up a virtual machine</title>
      <para>
	It is possible to use pbuilder-uml for other uses than just building Debian
	packages.
	<command>pbuilder-user-mode-linux login</command>
	will let a user use a shell inside the user-mode-linux
	pbuilder base image,
	and <command>pbuilder-user-mode-linux execute</command> will
	allow the user to execute a script inside the image.
      </para>
      <para>
	You can use the script to install ssh and add a new user,
	so that it is possible to access inside the UML through ssh.
      </para>
      <para>
	Note that it is not possible to use a script from
	<filename>/tmp</filename> due to the way pbuilder-uml mounts
	a tmpfs at <filename>/tmp</filename>.
      </para>
      <para>
	The following example script may be useful in starting a sshd
	inside uml.
      </para>
      <screen>
#!/bin/bash

apt-get install -y ssh xbase-clients xterm
echo "enter root password"
passwd
cp /etc/ssh/sshd_config{,-}
sed 's/X11Forwarding.*/X11Forwarding yes/' /etc/ssh/sshd_config- &gt; /etc/ssh/sshd_config

/etc/init.d/ssh restart
ifconfig
echo "Hit enter to finish"
read
      </screen>
    </sect1>
  </chapter>
  <chapter id="faq">
    <title>Frequently asked questions </title>
    <!-- Start of FAQ -->
    <para>
      Here, known problems and frequently asked questions are
      documented. This portion was initially available in README.Debian
      file, but moved here.
    </para>
    <sect1>
      <title>pbuilder create fails</title>
      <para>
	It often happens that pbuilder cannot create the latest chroot.
	Try upgrading pbuilder and debootstrap.
	It is currently only possible to create software that handles the
	past. Future prediction is a feature which may be added later after
	we have become comfortable with the past.
      </para>
      <para>
	There are people who occasionally backport debootstrap to stable
	versions; hunt for them.
      </para>
      <para>
	When there are errors with the debootstrap phase,
	the debootstrap script needs to be fixed.
	pbuilder does not provide a way to work around debootstrap.
      </para>
    </sect1>
    <sect1 id="bindmountlimits">
      <title>Directories that cannot be bind-mounted</title>
      <para>
	Because of the way pbuilder works, there are several directories
	which cannot be bind-mounted when running pbuilder.
	The directories include <filename>/tmp</filename>,
	<filename>/var/cache/pbuilder</filename>,
	and system directories such as <filename>/etc</filename> and
	<filename>/usr</filename>.
	The recommendation is to use directories under the user's home directory
	for bind-mounts.
      </para>
    </sect1>
    <sect1 id="modifyupdate">
      <title>Logging in to pbuilder to modify the environment</title>
      <para>
	It is sometimes necessary to modify the chroot environment.
	<command>login</command> will remove the contents of the chroot after logout.
	It is possible to invoke a shell using hook scripts.
	<command>pbuilder update</command> executes 'E' scripts,
	and a sample for invoking a shell
	is provided as <filename>C10shell</filename>.
      </para>
      <screen>
$ mkdir ~/loginhooks
$ cp C10shell ~/loginhooks/E10shell
$ sudo pbuilder update --hookdir ~/loginhooks/E10shell
      </screen>
      <para>
	It is also possible to add --save-after-exec
	and/or --save-after-login options
	to the <command>pbuilder login</command> session
	to accomplish the goal.
	It is possible to add the --uml-login-nocow option
	to <command>pbuilder-user-mode-linux login</command> session
	as well.
      </para>
    </sect1>
    <sect1 id="BUILDRESULTUID">
      <title>Setting BUILDRESULTUID for sudo sessions</title>
      <para>
	It is possible to set BUILDRESULTUID=$SUDO_UID in pbuilderrc
	to set the proper BUILDRESULTUID when using sudo.
      </para>
    </sect1>
    <sect1 id="tmpdir">
      <title>Notes on usage of $TMPDIR</title>
      <para>
	If you are setting $TMPDIR to an unusual value, of other than
	<filename>/tmp</filename>, you will find that some errors may occur inside the chroot,
	such as <command>dpkg-source</command> failing.
      </para>
      <para>There are two options, you may install a hook to create that
	directory, or set
	<screen>export TMPDIR=/tmp</screen>
	in pbuilderrc. Take your pick.
      </para>
      <para>
	An example script is provided as
	<filename>examples/D10tmp</filename> with pbuilder.
      </para>
    </sect1>
    <sect1 id="DISTRIBUTIONSWITCH">
      <title>Creating a shortcut for running pbuilder with a specific distribution</title>
      <para>
	When working with multiple chroots, it would be nice to work with
	scripts that reduce the amount of typing.
	An example script
	<filename>pbuilder-distribution.sh</filename> is provided as an example.
	Invoking the script as <filename>pbuilder-woody</filename> will invoke
	pbuilder with a woody chroot.
      </para>
    </sect1>
    <sect1>
      <title>Using special apt sources lists</title>
      <para>
	If you have some very specialized requirements on your
	apt setup inside pbuilder,
	it is possible to specify that through
	the <command><option>--othermirror</option></command>
	option.
	Try something like:
	<command><option>--othermirror "deb http://local/mirror stable main|deb-src http://local/source/repository ./"</option></command>
      </para>
      <para>
	To use the local filesystem instead of http, it is necessary to do
	bind-mounting.
	<command><option>--bindmounts</option></command>
	is a command-line option useful for such cases.
      </para>
    </sect1>
    <sect1>
      <title>How to get pbuilder to run apt-get update before trying to satisfy build-dependency</title>
      <para>
	You can use hook scripts for this.
	D scripts are run before satisfying build-dependency.
      </para>
    </sect1>
    <sect1>
      <title>Different bash prompts inside pbuilder login</title>
      <para>
	To make distinguishing bash prompts inside pbuilder
	easier, it is possible to set environment variables such as PS1
	inside <filename>pbuilderrc</filename>
      </para>
      <para>
	With versions of bash more recent than 2.05b-2-15,
	the value of the debian_chroot variable, if set,
	is included in the value of PS1 (the Bash prompt)
	inside the chroot.
	In prior versions of bash,<footnote>
	  <para>Versions of bash from and before Debian 3.0</para>
	</footnote>
	setting PS1 in pbuilderrc worked.
      </para>
      <para>example of debian_chroot</para>
      <screen>
	export debian_chroot="pbuild$$"
      </screen>
      <para>example of PS1</para>
      <screen>
	export PS1="pbuild chroot 32165 # "
      </screen>
    </sect1>
    <sect1>
      <title>Using /var/cache/apt/archives for the package cache</title>
      <para>
	For the help of low-bandwidth systems,
	it is possible to use <filename>/var/cache/apt/archives</filename> as the
	package cache.
	Just specify it instead of the default <filename>/var/cache/pbuilder/aptcache</filename>.
      </para>
      <para>
	It is however not possible to do so currently with the user-mode-linux
	version of pbuilder, because <filename>/var/cache/apt/archives</filename>
	is usually only writable by root.
      </para>
      <para>
	Use of dedicated tools such as apt-proxy is recommended, since caching of packages
	would benefit the system outside the scope of pbuilder.
      </para>
    </sect1>
    <sect1 id="woodybackport">
      <title>pbuilder backported to stable Debian releases</title>
      <para>
	Currently stable backport to sarge is not known to be available.
	It should hopefully soon be available.
      </para>
    </sect1>
    <sect1 id="LOGNAME">
      <title>Warning about LOGNAME not being defined</title>
      <para>
	You might see a lot of warning messages when running pbuilder.
      </para>
      <para>
	<screen>
	dpkg-genchanges: warning: no utmp entry available and LOGNAME not defined; using uid of process (1234)
	</screen>
      </para>
      <para>
	It is currently safe to ignore this warning message.
	Please report back if you find any problem with having LOGNAME unset.
	Setting LOGNAME caused a few problems when invoking chroot.
      </para>
    </sect1>
    <sect1 id="nobuildconflictessential">
      <title>Cannot Build-conflict against an essential package</title>
      <para>
	pbuilder does not currently allow Build-Conflicts against
	essential packages.
	It should be obvious that essential packages should not be
	removed from a working Debian system, and a source
	package should not try to force removal of such packages
	on people building the package.
      </para>
    </sect1>
    <sect1>
      <title>Avoiding the "ln: Invalid cross-device link" message</title>
      <para>
	By default, pbuilder uses hard links to manage the pbuilder package cache.
	It is not possible to make hard links across different devices;
	and thus this error will occur, depending on your set up.
	If this happens, set <screen>APTCACHEHARDLINK=no</screen>
	in your pbuilderrc file.
      </para>
    </sect1>
    <sect1>
      <title>Using fakechroot</title>
      <para>
	It is possible to use <command>fakechroot</command> instead of being root
	to run pbuilder; however, several things make this impractical.
	<command>fakechroot</command> overrides library loads and tries to
	override default libc functions when providing the functionality of
	virtual chroot.
	However, some binaries do no use libc to function, or override the overriding
	provided by fakechroot.
	One example is <command>ldd</command>.
	Inside <command>fakechroot</command>,
	<command>ldd</command>
	will check the library dependency outside of the chroot,
	which is not the expected behavior.
      </para>
      <para>
	To work around the problem, fakechroot provides a patch for debootstrap.
	Use that, so that ldd and ldconfig are overridden.
      </para>
      <para>
	Make sure you have set your path correctly, as described in <filename>/usr/share/doc/fakechroot/README.Debian</filename>
      </para>
    </sect1>
    <sect1 id="debconfinsidepbuilder">
      <title>Using debconf inside pbuilder sessions</title>
      <para>
	To use debconf inside pbuilder, setting DEBIAN_FRONTEND to
	<quote>readline</quote> in <filename>pbuilderrc</filename> should work.
	Setting it to <quote>dialog</quote> should also work, but make sure
	whiptail or dialog is installed inside the chroot.
      </para>
    </sect1>
    <sect1 id="nodev">
      <title>nodev mount options hinder pbuilder activity</title>
      <para>
	If you see messages such as this when building a chroot, you are mounting the filesystem with
	the nodev option.
      </para>
      <screen>
	/var/lib/dpkg/info/base-files.postinst: /dev/null: Permission denied
      </screen>
      <para>
	You will also have problems if you mount the filesystem with
	the noexec option, or nosuid.
	Make sure you do not have these flags set when mounting the filesystem for
	<filename>/var/cache/pbuilder</filename> or $BUILDPLACE.
      </para>
      <para>
	This is not a problem when using User-mode-linux.
      </para>
      <para>
	See <ulink url="http://bugs.debian.org/316135">
	  316135
	</ulink> for example.
      </para>
    </sect1>
    <sect1 id="faqslowpbuilder">
      <title>pbuilder is slow</title>
      <para>
	pbuilder is often slow. The slowest part of pbuilder is extracting the tar.gz every time
	pbuilder is invoked. That can be avoided by using <command>pbuilder-user-mode-linux</command>.
	<command>pbuilder-user-mode-linux</command> uses
	COW filesystem, and thus does not need to clean up and recreate the root filesystem.
      </para>
      <para>
	pbuilder-user-mode-linux is slower in executing the actual build system, due to the
	usual user-mode-linux overhead for system calls. It is more friendly to the hard drive.
      </para>
      <para>
	pbuilder with cowdancer is under development, to allow
	pbuilder to start up faster; when it is ready, it should 
	be able to replace the current setup.
      </para>
    </sect1>
    <sect1 id="chrootmemo">
      <title>Creating a chroot reminder</title>
      <para>
	You may want a sign that you are inside a chroot, when
	working with chroot.
	Check out the <filename>examples/F90chrootmemo</filename>
	hook script.
	It will create a file called <filename>/CHROOT</filename>
	inside your chroot.
      </para>
    </sect1>
    <sect1 id="sponsor">
      <title>Using pdebuild to sponsor package</title>
      <para>
	To sign a package marking for sponsorship,
	it is possible to use<command><option> --auto-debsign</option></command> and
	<command><option>--debsign-k</option></command> options of pdebuild.
      </para>
      <screen>
	<command>pdebuild  <option>--auto-debsign </option> <option>--debsign-k </option><parameter>XXXXXXXX</parameter></command>
      </screen>
    </sect1>
    <sect1 id="sourcechanges">
      <title>Why is there a source.changes file in ../?</title>
      <para>
	When running pdebuild, pbuilder will run dpkg-buildpackage to create a
	Debian source package to pass it on to pbuilder.
	File named XXXX_YYY_source.changes is what remains from that process.
	It is harmless unless you try to upload it to the Debian archive.
      </para>
      <para>
	This behavior is different when running through --use-pdebuild-internal
      </para>
    </sect1>
    <!-- end of FAQ -->
  </chapter>

  <chapter id="develanddebug">
    <title>Troubleshooting and development</title>
    <sect1 id="bugreport">
      <title>Reporting bugs </title>
      <para>
	To report bugs, it would be important to have a 
	log of what's going wrong.
	Most of the time, adding a --debug option and re-running the 
	session should do the trick.
	Please send the log of such session along with your problem
	to ease the debugging process.
      </para>
    </sect1>
    <sect1 id="mailinglist">
      <title>Mailing list</title>
      <para>
	There is a mailing list for pbuilder on alioth (pbuilder-maint@lists.alioth.debian.org).
	You can subscribe through the alioth web interface.
	<ulink url="http://alioth.debian.org/mail/?group_id=30778">
	  http://alioth.debian.org/mail/?group_id=30778</ulink>.
      </para>
    </sect1>
    <sect1 id="development">
      <title>Development</title>
      <para>
	This section is a start of what I want to do
	later.
      </para>
      <para>
	pbuilder is now co-maintained at alioth.
	There is an alioth project page at
	<ulink url="http://alioth.debian.org/projects/pbuilder">
	http://alioth.debian.org/projects/pbuilder</ulink>.
	CVS Repository is available through anonymous CVS
      </para>
      <screen>
cvs -d:pserver:anonymous@cvs.alioth.debian.org:/cvsroot/pbuilder login
cvs -z3 -d:pserver:anonymous@cvs.alioth.debian.org:/cvsroot/pbuilder co pbuilder
      </screen>
      <para>
	Testsuites are available in tests/ directory, and 
	changes are expected not to break the testsuites.
      </para>
      <para>
	When making changes, the detailed description of the 
	change should be documented in 
	ChangeLog, and committed alongside.
	A brief summary of the change should be documented in 
	debian/changelog, so that users can see them.
	The description of debian/changelog is targeted at 
	users, and ChangeLog is targeted at developers.
	For CVS commit messages, a cut-n-paste of 
	ChangeLog diff would suffice.
      </para>
    </sect1>
  </chapter>

  <chapter id="otheruse">
    <title>Other uses of pbuilder</title>
    <sect1 id="chroot">
      <title>Using pbuilder for small experiments</title>
      <para>
	There are cases when some small experimenting is required, and
	you do not want to damage the main system,
	like when installing experimental library packages,
	or compiling with experimental compilers.
	For such cases, the <command>pbuilder login</command> command is available.
      </para>
      <para>
	<command>pbuilder login </command> is a debugging feature for
	pbuilder itself, but it also allows users to have a temporary chroot.
      </para>
      <para>
	Note that the chroot is cleaned after logging out of the shell,
	and mounting file systems inside it is considered harmful.
      </para>
    </sect1>
    <sect1>
      <title>Running little programs inside the chroot</title>
      <para>
	To facilitate using pbuilder for other uses,
	<command>pbuilder execute</command> is available.
	<command>pbuilder execute </command> will take a script
	specified in the command-line argument, and
	invoke the script inside the chroot.
      </para>
      <para>
	The script can be useful for sequences of operations such as
	installing ssh and adding a new user inside the chroot.
      </para>
    </sect1>
  </chapter>
  <chapter id="experimental">
    <title>Experimental or wish list features of pbuilder</title>
    <para>
      There are some advanced features, above that of the
      basic feature of pbuilder, for some specific purposes.
    </para>
    <sect1 id="lvm">
      <title>Using LVM</title>
      <para>
	LVM2 has a useful snapshot function that features Copy-on-write images.
	That could be used for pbuilder just as it can be used for
	the user-mode-linux pbuilder port.
	It may prove to be faster, but it is not implemented yet,
	and so no measurement has been made, yet.
      </para>
      <para>
	User-mode-linux cow support has been preferred for 
	pbuilder-uml, but the idea of using LVM is interesting.
      </para>
    </sect1>
    <sect1 id="cowdancer">
      <title>Using cowdancer</title>
      <para>
	cowdancer allows copy-on-write semantics on filesystem 
	using hardlinks and hardlink-breaking-on-write tricks.
	pbuilder using cowdancer seems to be much faster
	and it is one ideal point for improvement.
      </para>
    </sect1>
    <sect1 id="withouttargz">
      <title>Using pbuilder without tar.gz</title>
      <para>
	The <command><option>--no-targz</option></command>
	option of <command>pbuilder</command>
	will allow usage of pbuilder in a different way
	from conventional usage.
	It will try to use an existing chroot,
	and will not try to clean up after
	working on it.
	It is an operation mode more like
	<command>sbuild</command>.
      </para>
      <para>
	It should be possible to create chroot images
	for <command>dchroot</command> with the following commands:
	<screen>
# pbuilder create --distribution potato --no-targz --basetgz /chroot/potato
# pbuilder create --distribution woody --no-targz --basetgz /chroot/woody
# pbuilder create --distribution sid --no-targz --basetgz /chroot/sid
	</screen>
      </para>
    </sect1>
  </chapter>
  <chapter id="refs">
    <title>Reference materials</title>
    <sect1 id="dirstructoutside">
      <title>Directory structure outside the chroot</title>
      <table>
	<title>Directory Structure outside the chroot </title>
	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>Directory</entry>
	      <entry>Meaning</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><filename>/etc/pbuilderrc</filename></entry>
	      <entry>configuration file</entry>
	    </row>
	    <row>
	      <entry><filename>/usr/share/pbuilder/pbuilderrc</filename></entry>
	      <entry>Default configuration</entry>
	    </row>
	    <row>
	      <entry><filename>/var/cache/pbuilder/base.tgz</filename></entry>
	      <entry>Default location pbuilder uses for base.tgz, the tarball containing a basic Debian installation
	        with only the build-essential packages.
	      </entry>
	    </row>
	    <row>
	      <entry><filename>/var/cache/pbuilder/build/PID/</filename></entry>
	      <entry>Default location pbuilder uses for chroot</entry>
	    </row>
	    <row>
	      <entry><filename>/var/cache/pbuilder/aptcache</filename></entry>
	      <entry>Default location pbuilder will use as apt cache, to store deb packages required during pbuilder build.</entry>
	    </row>
	    <row>
	      <entry><filename>/var/cache/pbuilder/result</filename></entry>
	      <entry>Default location pbuilder puts the deb files and other files created after build</entry>
	    </row>
	    <row>
	      <entry><filename>/var/cache/pbuilder/pbuilder-umlresult</filename></entry>
	      <entry>Default location pbuilder-user-mode-linux puts the deb files and other files created after build </entry>
	    </row>
	    <row>
	      <entry><filename>/var/cache/pbuilder/pbuilder-mnt</filename></entry>
	      <entry>Default location pbuilder-user-mode-linux uses for mounting the COW filesystem, for chrooting.</entry>
	    </row>
	    <row>
	      <entry><filename>/tmp</filename></entry>
	      <entry>pbuilder-user-mode-linux will mount tmpfs for work.</entry>
	    </row>
	    <row>
	      <entry><filename>${HOME}/tmp/PID.cow</filename></entry>
	      <entry>pbuilder-user-mode-linux use this directory for location of COW filesystem.</entry>
	    </row>
	    <row>
	      <entry><filename>${HOME}/uml-image</filename></entry>
	      <entry>pbuilder-user-mode-linux use this directory for UML full disk image.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect1>
    <sect1 id="dirstructinside">
      <title>Directory structure inside the chroot</title>
      <table>
	<title>Directory Structure outside the chroot </title>
	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>Directory</entry>
	      <entry>Meaning</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><filename>/tmp/buildd</filename></entry>
	      <entry>Default place used in pbuilder to place the Debian package to be processed.
		/tmp/buildd/packagename-version/ will be the root directory of the package being processed.
	      </entry>
	    </row>
	    <row>
	      <entry><filename>/run</filename></entry>
	      <entry>The script passwd as an argument to pbuilder execute 
		is passed on.
	      </entry>
	    </row>
	    <row>
	      <entry><filename>/tmp/hooks</filename></entry>
	      <entry>
		The location of hooks.
	      </entry>
	    </row>
	    <row>
	      <entry><filename>/var/cache/apt/archives</filename></entry>
	      <entry>
		pbuilder copies the content of this directory to and from 
		the aptcache directory of outside chroot.
	      </entry>
	    </row>
	    <row>
	      <entry><filename>/tmp/XXXX</filename></entry>
	      <entry>pbuilder-user-mode-linux uses a script in /tmp 
		to bootstrap into user-mode-linux</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect1>
  </chapter>
  <chapter>
    <title>Minor details</title>
    <sect1>
      <title>Documentation history </title>
      <para>
	This document was started on 28 Dec 2002 by
	Junichi Uekawa, trying to document what is known
	about pbuilder.
      </para>
      <para>
	This documentation is available from the pbuilder source tarball,
	and from the CVS repository of pbuilder (web-based access is possible).
	A copy of this documentation can be found on the
	<ulink url="http://pbuilder.alioth.debian.org/pbuilder-doc.html">Alioth project page for pbuilder</ulink>.
	The homepage for pbuilder is
	<ulink url="http://www.netfort.gr.jp/~dancer/software/pbuilder.html">
	  http://www.netfort.gr.jp/~dancer/software/pbuilder.html
	</ulink>
	The project has moved its hosting to alioth project since 4 Sep 2005.
	It is available 
	<ulink url="http://pbuilder.alioth.debian.org/">
	  http://pbuilder.alioth.debian.org/
	</ulink>
      </para>
      <para>
	Documentation is written using DocBook XML, 
	with emacs PSGML mode, and using wysidocbookxml for live 
	previewing.
      </para>
    </sect1>
    <sect1 id="pbuilderbackgroundhistory">
      <title>Possibly inaccurate Background History of pbuilder</title>
      <para>
	The following is a most possibly inaccurate account of how
	pbuilder came to happen, and other attempts to
	make something like pbuilder happen.
	This part of the document was originally in the AUTHORS file,
	to give credit to those who existed before pbuilder.
      </para>
      <sect2>
	<title>The Time Before pbuilder</title>
	<para>
	  There was once dbuild, which was a shell script to build
	  Debian packages from source. Lars Wirzenius wrote that
	  script, and it was good, short, and simple (probably).
	  There was nothing like build-depends then (I think), and it was simple.
	  It could have been improved, I could only find references and no actual source.
	</para>
	<para>
	  debbuild was probably written by James Troup. I don't know it
	  because I have never seen the actual code, I could only find some
	  references to it on the net, and mailing list logs.
	</para>
	<para>
	  sbuild is a perl script to build Debian packages from source.
	  It parses Build-Depends, and performs other miscellaneous checks,
	  and has a lot of hacks to actually get things building,
	  including a table of what package to use when virtual packages are
	  specified (does it do that still?).
	  It supports the use of a local database for packages which do not
	  have build-dependencies. It was written by Ronan Hodek,
	  and I think it was patched and fixed and extended by
	  several people. It is part of wanna-build, and used extensively
	  in the Debian buildd system. I think it was maintained
	  mostly by Ryan Murray.
	</para>
      </sect2>
      <sect2 id="birth">
	<title>Birth of pbuilder</title>
	<para>
	  wanna-build (sbuild) was (at the time of year 2001) quite difficult to
	  set up, and it was never a Debian package. dbuild was something that predated
	  Build-Depends.
	</para>
	<para>
	  Building packages from source using Build-Depends
	  information within a chroot sounded trivial; and
	  pbuilder was born. It was initially a shell script
	  with only a few lines, which called debootstrap
	  and chroot and dpkg-buildpackage in the same run,
	  but soon, it was decided that that's too slow.
	</para>
	<para>
	  Yes, and it took almost an year to get things somewhat
	  right, and in the middle of the process, Debian 3.0
	  was released. Yay.
	  Debian 3.0 wasn't completely buildable with pbuilder,
	  but the amount of packages which are not buildable
	  is steadily decreasing. (I hope)
	</para>
      </sect2>
      <sect2 id="secondyear">
	<title>And the second year of its life</title>
	<para>
	  Someone wanted pbuilder to not run as root,
	  and as User-mode-linux has become more useful as time passed,
	  I've started experimenting with pbuilder-uml.
	  pbuilder-uml has not been able to run as often as it should,
	  and bootstrapping user-mode-linux environment has been
	  pretty hard.
	</para>
      </sect2>
      <sect2 id="fifthyear">
	<title>Fifth year of pbuilder</title>
	<para>
	  pbuilder is now widely adopted as a 'almost standard' tool
	  for testing packages, and building packages in a pristine environment.
	  There are other similar tools that do similar tasks, 
	  but they do not share the exact same goal.
	  To commemorate this fact, pbuilder is now co-maintained 
	  with several people. 
	</para>
      </sect2>
    </sect1>
  </chapter>
</book>
